type="n"
remove(type)
RealEstate = read.table("http://users.stat.umn.edu/~guxxx192/courses/wichern_data/t7-1.dat",
col.names = c("z1", "z2", "Y"))
print(lm_fit <- lm(Y ~ z1 + z2, data = RealEstate))
summary(lm_fit)
confint(lm_fit)
print(RSS <- (summary(lm_fit)$sigma)^2 * (lm_fit$df))
print(sum((lm_fit$residuals)^2))
library(leaps)
install.packages("leaps")
library(leaps)
pplot <- function(cp, ...) {
p <- max(cp$size)
plot(cp$size, cp$Cp, xlab = "p", ylab = "Cp", type = "n")
labels <- apply(
cp$which, 1,
function(x) {
if (any(x) == FALSE) return("(0)")
paste0("(", paste(as.character((1:(p - 1))[x]), collapse = ", "), ")")
}
)
points(cp$size, cp$Cp, pch=16)
text(cp$size, cp$Cp, labels, ...)
abline(0, 1)
}
exhaust <- leaps(RealEstate[, 1:2], RealEstate[, 3])
fit0 = lm(Y ~ 1, data = RealEstate)
Cp0 = sum(fit0$residuals^2)/(summary(lm_fit)$sigma^2) -
(nrow(RealEstate) - 2 * 1)
exhaust$which = rbind(rep(FALSE,2), exhaust$which)
rownames(exhaust$which)[1] = "0"
exhaust$size = c(1, exhaust$size)
exhaust$Cp = c(Cp0, exhaust$Cp)
pplot(exhaust, pos = c(1, 4, 1, 3), cex = 0.7)
points(cp$size, cp$Cp, pch=16)
URL="http://users.stat.umn.edu/~guxxx192/courses/wichern_data/p1-4.dat"
forbes<-read.table(URL,col.names=c("sales","profits","assets"))
# Cp plot
library(leaps)
URL="http://users.stat.umn.edu/~guxxx192/courses/wichern_data/p1-4.dat"
forbes<-read.table(URL,col.names=c("sales","profits","assets"))
URL<-"http://users.stat.umn.edu/~guxxx192/courses/wichern_data/p1-4.dat"
forbes<-read.table(URL,col.names=c("sales","profits","assets"))
# Cp plot
library(leaps)
Cpplot <- function(cp, ...) {
URL<-"http://users.stat.umn.edu/~guxxx192/courses/wichern_data/p1-4.dat"
forbes<-read.table(URL,col.names=c("sales","profits","assets"))
URL<-"http://users.stat.umn.edu/~guxxx192/courses/wichern_data/p1-4.dat"
}
install.packages("leaps")
install.packages("leaps")
library(leaps)
print(lm_fit <- lm(profits ~ sales + assets, data = RealEstate))
print(lm_fit <- lm(profits ~ sales + assets, data = forbes))
ami = read.table("http://users.stat.umn.edu/~guxxx192/courses/wichern_data/t7-6.dat",
col.names=c(paste0("y", 1:2), paste0("z", 1:5)))
ami$z1 = as.factor(ami$z1) # geneder variable is a factor
library(car)
fit = lm(cbind(y1, y2) ~ ., data = ami)
Manova(fit)
n = nrow(ami) # number of observations
m = 2 # number of response variables
r = 5 # number of covariates
all_subsets = matrix(NA, 2^r, r)
for (k in 1:r) {
all_subsets[,k] = rep(rep(c(FALSE, TRUE), each=2^(k-1)), 2^(r-k))
}
all_subsets = all_subsets[order(rowSums(all_subsets)), ]
rownames(all_subsets) = rowSums(all_subsets)
colnames(all_subsets) = paste0("z", 1:r)
rownames(all_subsets)
aic4models = rep(NA, 2^r) # AIC for each subset model
num_param = rowSums(all_subsets) + 1 # number of parameters for each subset model
for (k in 1:2^r) {
if (any(all_subsets[k, ]) == FALSE) {
form = paste0("cbind(y1, y2) ~ 1")
} else {
form = paste0(
"cbind(y1, y2) ~ ",
paste0("z", seq(r)[all_subsets[k, ]], collapse="+")
)
}
fit = lm(form, data = ami)
Sigma_hat = t(fit$residuals) %*% fit$residuals/n
## formula of AIC appears in p. 397 of the textbook
aic4models[k] = n*log(det(Sigma_hat)) - 2 * num_param[k] * m
}
cbind(all_subsets, num_param, aic4models)
plot(num_param, aic4models)
ami = read.table("http://users.stat.umn.edu/~guxxx192/courses/wichern_data/t7-6.dat",
col.names=c(paste0("y", 1:2), paste0("z", 1:5)))
ami$z1 = as.factor(ami$z1) # geneder variable is a factor
library(car)
fit1 = lm(cbind(y1) ~ ., data = ami)
Manova(fit1)
summary(fit1)
Manova(fit1)
fit = lm(cbind(y1, y2) ~ ., data = ami)
Manova(fit)
fit1 = lm(y1 ~ ., data = ami)
Manova(fit1)
aov(y1 ~ ., data = ami)
summary(ami)
aov(y1 ~c( paste0("z", 1:5)), data = ami)
aov(y1 ~cbind(z1,z2,z3,z4,z5), data = ami)
aov(y1 ~z1,z2,z3,z4,z5, data = ami)
aov(y1 ~z1,z3,z4,z5, data = ami)
aov(y1 ~ami(3:7), data = ami)
aov(y1 ~ami(c(3:7), data = ami)
}
aov(y1 ~z1+z2, data = ami)
aov(y1 ~z1+z2+z3+z4+z5, data = ami)
aov(fomula=y1 ~z1+z2+z3+z4+z5, data = ami)
fit1=aov(y1 ~z1+z2+z3+z4+z5, data = ami)
summary(fit1)
fit = lm(cbind(y1, y2) ~ ., data = ami)
Manova(fit)
fit_updated = update(fit, . ~ . - z3 - z4 -z5)
Manova(fit_updated)
fit_interact = update(fit_updated, . ~ . + z1:z2)
Manova(fit_interact)
predict(fit_updated, newdata = data.frame(z1=levels(ami$z1)[2],
z2 = 1200))
summary(fit_updated)
y1fit=lm(y1~z1,data=ami)
summary(y1fit)
y1aov=aov(y1 ~z1+z2+z3+z4+z5, data = ami)
summary(y1aov)
y1fit=lm(y1~z2,data=ami)
summary(y1fit)
y1aov=aov(y1 ~z1+z2+z3+z4+z5, data = ami)
summary(y1aov)
y1fit=lm(y1~z2,data=ami)
summary(y1fit)
predict(y1fit, newdata = data.frame(z2=1200), interval = "predict")
y1y2fit = lm(cbind(y1, y2) ~ ., data = ami)
Manova(y1y2fit)
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE,xlim=c(120,180),ylim=c(330,380), asp = 1) # prediction ellipse
```
After we remove variables other than z~1~ and z~2~, we apply MANOVA again.
```{r}
fit_updated = update(y1y2fit, . ~ . - z3 - z4 -z5)
Manova(fit_updated)
fit_interact = update(fit_updated, . ~ . + z1:z2)
Manova(fit_interact)
z0 = c(1, 1, 1200)
Z = cbind(1, ami$z1, ami$z2)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3]))
z0 = c(1, TRUE, 1200)
Z = cbind(1, ami$z1, ami$z2)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3]))
summary(z0)
str(z0)
z0[2]<-factor(z0[2])
str(z0)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3]))
z0[2]<-as.factor(z0[2])
predvals = predict(fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3]))
z0[2]<-as.factor(z0[2])
str(z0[2])
z0<-as.factor(z0)
str(z0[2])
z0 = dataframe(c(1, 1, 1200))
z0 = data.frame(c(1, 1, 1200))
z0[2]<-as.factor(z0[2])
z0(2)<-as.factor(z0(2)])
z0(2)<-as.factor(z0(2))
z0
str(z00)
str(z0)
z0 = data.frame(c(1, 1, 1200)')
''
z0<-data.frame(1,TRUE, 1200)
str(z0)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3]))
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
z0[1,2]<-as.factor(z0[1,2])
str(z0)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
str(as.factor(1))
z0<-data.frame(1,as.factor(1), 1200)
str(z0)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
n=nrow(ami)
m=2
r=2
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
z0<-c(1,as.factor(1), 1200)
str(z0)
z0<-as.vector(z0)
n=nrow(ami)
m=2
r=2
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE, xlim=c(120,180),ylim=c(330,380), asp = 1) # prediction ellipse
```
z0
z0<-as.vector(t(z0))
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE, xlim=c(120,180),ylim=c(330,380), asp = 1) # prediction ellipse
```
Sigma_hat = t(fit_updated$residuals) %*% fit_updated$residuals/n
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE, xlim=c(120,180),ylim=c(330,380), asp = 1) # prediction ellipse
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
z0<-data.frame(1,as.factor(1), 1200)
Z = cbind(1, ami$z1, ami$z2)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
z0<-as.vector(t(z0))
z0<-t(as.vector(z0))
z0<-data.frame(1,as.factor(1), 1200)
z0<-t(as.vector(z0))
n=nrow(ami)
m=2
r=2
Sigma_hat = t(fit_updated$residuals) %*% fit_updated$residuals/n
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
str(z0)
z0<-c(1,1,1200)
n=nrow(ami)
m=2
r=2
Sigma_hat = t(fit_updated$residuals) %*% fit_updated$residuals/n
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE, xlim=c(120,180),ylim=c(330,380), asp = 1) # prediction ellipse
z0<-data.frame(1,as.factor(1), 1200)
Z = cbind(1, ami$z1, ami$z2)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
predvals
str(predvals)
as.vector(predvals)
str(as.vector(predvals))
z0<-c(1,1,1200)
n=nrow(ami)
m=2
r=2
Sigma_hat = t(fit_updated$residuals) %*% fit_updated$residuals/n
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE, xlim=c(120,180),ylim=c(330,380), asp = 1) # prediction ellipse
z0<-data.frame(1,as.factor(1), 1200)
Z = cbind(1, ami$z1, ami$z2)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
z0<-c(1,1,1200)
n=nrow(ami)
m=2
r=2
Sigma_hat = t(fit_updated$residuals) %*% fit_updated$residuals/n
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE, xlim=c(120,180),ylim=c(330,380), asp = 1)
radius_pred
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE,  asp = 1)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
z0<-data.frame(1,as.factor(1), 1200)
Z = cbind(1, ami$z1, ami$z2)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
predvals
str(predvals)
View(predvals)
y2aov=aov(y2 ~z1+z2+z3+z4+z5, data = ami)
summary(y2aov)
y2fit=lm(y2~z1+z2,data=ami)
summary(y2fit)
l
predict(y1fit, newdata = data.frame(z1=1,z2=1200), interval = "predict")
predict(y2fit, newdata = data.frame(z1=1,z2=1200), interval = "predict")
predict(y2fit, newdata = data.frame(z1=as.factor(1),z2=1200), interval = "predict")
y2fitpred=predict(y2fit, newdata = data.frame(z1=as.factor(1),z2=1200), interval = "predict")
str(y2fitpred)
print(y2fitpred<-predict(y2fit, newdata = data.frame(z1=as.factor(1),z2=1200), interval = "predict"))
abline(h=y2fitpred[1]-y2fitpred[2])
abline(h=y2fitpred[1]+y2fitpred[2])
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE,  asp = 1)
abline(h=y2fitpred[1]+y2fitpred[2])
abline(h=y2fitpred[1]+y2fitpred[3])
abline(h=(y2fitpred[1]+y2fitpred[2]))
abline(h=y2fitpred[1]+y2fitpred[3])
y2fitpred[1]+y2fitpred[2]
y2fitpred[1]+y2fitpred[3]
abline(h=y2fitpred[1]+y2fitpred[3])
abline(h=2271)
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE,  asp = 1)
abline(h=y2fitpred[1]+y2fitpred[3])
abline(v=y1fitpred[1]+y1fitpred[2])
print(y1fitpred<-predict(y1fit, newdata = data.frame(z2=1200), interval = "predict"))
abline(v=y1fitpred[1]+y1fitpred[2])
abline(v=y1fitpred[1]+y1fitpred[3])
print(y2fitpred<-predict(y2fit, newdata = data.frame(z1=as.factor(1),z2=1200), interval = "predict"))
abline(v=y1fitpred[3])
y2fitpred[2]
y2fitpred[3]
y1fitpred[2]
y1fitpred[3]
predvals = predict(fit_updated, newdata = data.frame(z1=z0[1,2], z2 = z0[1,3]))
predvals
for (k in 1:4) {
summary(aov(yk ~z1+z2+z3+z4, data = fiber))
}
summary(aov(y1 ~z1+z2+z3+z4, data = fiber))
URL="http://users.stat.umn.edu/~guxxx192/courses/wichern_data/t7-7.dat"
fiber<-read.table(URL,col.names=c(paste0("y", 1:4), paste0("z", 1:4)))
summary(aov(y1 ~z1+z2+z3+z4, data = fiber))
for (k in 1:4) {
+   summary(aov(yk ~z1+z2+z3+z4, data = fiber))
+ }
summary(aov(y1 ~z1+z2+z3+z4, data = fiber))
summary(aov(y2 ~z1+z2+z3+z4, data = fiber))
summary(aov(y3 ~z1+z2+z3+z4, data = fiber))
summary(aov(y4 ~z1+z2+z3+z4, data = fiber))
residualPlots(lm(y1~z2+z2+z4,data=fiber))
URL="http://users.stat.umn.edu/~guxxx192/courses/wichern_data/t7-7.dat"
fiber<-read.table(URL,col.names=c(paste0("y", 1:4), paste0("z", 1:4)))
summary(aov(y1 ~z1+z2+z3+z4, data = fiber))
summary(aov(y2 ~z1+z2+z3+z4, data = fiber))
summary(aov(y3 ~z1+z2+z3+z4, data = fiber))
summary(aov(y4 ~z1+z2+z3+z4, data = fiber))
residualPlots(lm(y1~z1+z2+z4,data=fiber))
residualPlots(lm(y2~z1+z2+z3+z4,data=fiber))
residualPlots(lm(y3~z1+z2+z4,data=fiber))
residualPlots(lm(y4~z1+z3+z4,data=fiber))
y3fit<-lm(y3~z1+z2+z4,data=fiber)
print(y3pred<-predict(y3fit, newdata = data.frame(z1=0.33,z2=1200,z4=1.01), interval = "predict"))
y1to4fit = lm(cbind(y1, y2,y3,y4) ~ ., data = fiber)
Manova(y1to4fit)
y1tp4fit_updated = update(y1y2fit, . ~ . - z1)
summary(fit_updated)
```
summary(fit_updated)
y1tp4fit_updated = lm(cbind(y1,y2,y3,y4) ~ z2+z3+z4, data = fiber)
summary(fit_updated)
y1to4fit_updated = lm(cbind(y1,y2,y3,y4) ~ z2+z3+z4, data = fiber)
summary(y1to4fit_updated)
lm.beta(y1to4fit_updated)
coefficients(y1to4fit_updated)
residuals(y1to4fit_updated)
y1to4fit_updated = lm(cbind(y1,y2,y3,y4) ~ z2+z3+z4, data = fiber)
coefficients(y1to4fit_updated)
epls=residuals(y1to4fit_updated)
n=nrow(epls)
r=4
sigma_hat<-(t(elps)%*%elpse)/(n-r-1)
sigma_hat<-(t(epls)%*%epls)/(n-r-1)
print(sigma_hat<-(t(epls)%*%epls)/(n-r-1))
residualPlot(y1to4fit_updated)
residualPlots(y1to4fit_updated)
r=3
print(sigma_hat<-(t(epls)%*%epls)/(n-r-1))
y1to4fit = lm(cbind(y1,y2,y3,y4) ~ ., data = fiber)
Manova(y1to4fit)
z0<-c(1,45.5,20.375,1.01)
Z = cbind(1, fiber$z2, fiber$z3,fiber$z4)
gram_inv = solve(t(Z) %*% Z)
predvals = predict(fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3], z3=z0[4]))
predvals = predict(y1to4fit_updated, newdata = data.frame(z1=z0[2], z2 = z0[3], z3=z0[4]))
predvals = predict(y1to4fit_updated, newdata = data.frame(z2=z0[2], z23= z0[3], z4=z0[4]))
predvals = predict(y1to4fit_updated, newdata = data.frame(z2=z0[2], z3= z0[3], z4=z0[4]))
m=2
Sigma_hat = t(fit_updated$residuals) %*% fit_updated$residuals/n
alpha = 0.05
Sigma_hat = t(y1to4fit_updated$residuals) %*% y1to4fit_updated$residuals/n
alpha = 0.05
radius_pred = drop(sqrt((1+ t(z0)) %*% gram_inv %*% z0 *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE,  asp = 1)
coefficients(y1to4fit_updated)
residualPlots(elps[,1]
)
residualPlots(epls[,1])
Plot(epls[,1])
plot(epls[,1])
```{r}
radius_pred = drop(sqrt((1+ t(z0) %*% gram_inv %*% z0) *m * (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
ellipse(center=as.vector(predvals), shape=n/(n-r-1)*Sigma_hat,radius=radius_pred, add=FALSE,  asp = 1)
predvals
z0<-c(1,45.5,20.375,1.01)
Z = cbind(1, fiber$z2, fiber$z3,fiber$z4)
predvals = predict(y1to4fit_updated, newdata = data.frame(z2=z0[2], z3= z0[3], z4=z0[4]))
gram_inv = solve(t(Z) %*% Z)
radius_pred = drop(sqrt((1+ t(z0)%*% gram_inv %*% z0 )*m* (n - r - 1)/(n - r- m) *qf(1-alpha, df1=m, df2=n-r-m)))
radius_pred
print(predvals-radius_pred*sqrt(sigma_hat[1,1]*n/(n-r-1)) )
fit_updated = lm(cbind(y1, y2) ~ z3+z4+z5, data = ami)
Manova(fit_updated)
residualPlots(fit_updated)
residualPlots(fit_updated[1])
residualPlots(fit_updated[,1])
plot(residuals(fit_updated)[,1])
plot(residuals(fit_updated)[,2])
print(y4upp<-predvals[4]+radius_pred*sqrt(sigma_hat[4,4]*n/(n-r-1)) )
z0<-c(1,45.5,20.375,1.01)
Z = cbind(1, fiber$z2, fiber$z3,fiber$z4)
print(predvals = predict(y1to4fit_updated, newdata = data.frame(z2=z0[2], z3= z0[3], z4=z0[4])))
